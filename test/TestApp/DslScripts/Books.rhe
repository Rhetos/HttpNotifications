Module Bookstore
{
    Entity Book
    {
        ShortString Code { AutoCode; }
        ShortString Title;
        Integer NumberOfPages;

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

        Logging { AllProperties; }

        SaveMethod
        {
            AfterSave EmitCrudEvents
                '
                    // DSL concept: EmitsCrudEvents => macro: Event Bookstore_Book_InsertedAny IEnumerable<Guid>, SaveMethod AfterSave.

                    if (deletedIds.Any())
                        _eventProcessing.EmitEvent("Bookstore_Book_Deleted", deletedIds.Select(item => item.ID));

                    if (updatedNew.Any())
                        _eventProcessing.EmitEvent("Bookstore_Book_Updated", updatedNew.Select(item => item.ID));

                    if (insertedNew.Any())
                        _eventProcessing.EmitEvent("Bookstore_Book_Inserted", insertedNew.Select(item => item.ID));
                ';

            AfterSave EmitAdditionalCustomEvents
                '
                    // Custom event example: Only one event per web request.
                    // DSL concepts: BusinessEventType Bookstore_Book_InsertedAny, SaveMethod AfterSave.

                    if (insertedNew.Any())
                        _eventProcessing.EmitEvent("Bookstore_Book_InsertedAny", (object)null);

                    // Custom event example: "Important" books inserted.

                    if (insertedNew.Any())
                    {
                        var notifyForItems = insertedNew.Where(book => book.Title?.Contains("important") == true).Select(item => new { item.ID, item.Title }).ToList();
                        if (notifyForItems.Any())
                            _eventProcessing.EmitEvent("Bookstore_Book_InsertedImportantBook", notifyForItems);
                    }
                ';

            // EmitsCrudEvents => macro: BusinessEventType Bookstore_Book_InsertedAny, SaveMethod AfterSave.

            // BusinessEventType Bookstore_Book_InsertedAny
            // SaveMethod AfterSave.

            // HttpNotificationsForCrudEvents;
            // Instead of handling events, we might directly call HttpNotifications here.
            // Downside is that app developer will need to make many changes it there is a need for a different implementation of notifications instead of HttpNotifications.
            // Also, custom HttpNotifications will mostly contain code that registers custom event types, which is a code small that hint that user actually wants to
            // specify a new event type, not a new HttpNotification.
        }

        RepositoryUses _eventProcessing 'Rhetos.Events.IEventProcessing, Rhetos.Events';
    }
}